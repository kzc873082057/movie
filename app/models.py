# coding:utf8from flask import Flaskfrom flask_sqlalchemy import SQLAlchemyimport datetimeimport pymysqlapp = Flask(__name__)app.config["SQLALCHEMY_DATABASE_URI"] = "mysql+pymysql://root:root@127.0.0.1:3306/movie"app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = Truedb = SQLAlchemy(app)# 会员class User(db.Model):    __tablename__ = "user"    id = db.Column(db.Integer, primary_key=True)  # 编号    name = db.Column(db.String(100), unique=True)  # 帐号    pwd = db.Column(db.String(100))  # 密码    email = db.Column(db.String(100), unique=True)  # 邮箱    phone = db.Column(db.String(11), unique=True)  # 电话    info = db.Column(db.Text)  # 简介    face = db.Column(db.String(255), unique=True)  # 照片地址    addtime = db.Column(db.DateTime, index=True, default=datetime.datetime.now())  # 注册时间    uuid = db.Column(db.String(255), unique=True)  # 唯一标志符    userlogs = db.relationship("Userlog", backref="user")  # 会员日志外键关联    comments = db.relationship("Comment", backref="user")  # 评论外键关联    moviecols = db.relationship("Moviecol", backref="user")  # 电影收藏外键关联    def __repr__(self):        return "<User {name}>".format(name=self.name)# 会员日志class Userlog(db.Model):    __tablename__ = "userlog"    id = db.Column(db.Integer, primary_key=True)  # # 编号    user_id = db.Column(db.Integer, db.ForeignKey("user.id"))  # 所属会员    ip = db.Column(db.String(100))  # 登陆IP    addtime = db.Column(db.DateTime, index=True, default=datetime.datetime.now())  # 登陆时间    def __repr__(self):        return "< Userlog {id}>".format(id=self.id)# 标签class Tag(db.Model):    __tablename__ = "tag"    id = db.Column(db.Integer, primary_key=True)  # # 编号    name = db.Column(db.String(100), unique=True)  # 标题    addtime = db.Column(db.DateTime, index=True, default=datetime.datetime.now())  # 添加时间    movies = db.relationship("Movie", backref="tag")  # 电影外键关联    def __repr__(self):        return "< Tag {name}>".format(name=self.name)class Movie(db.Model):    __tablename__ = "movie"    id = db.Column(db.Integer, primary_key=True)  # # 编号    title = db.Column(db.String(255), unique=True)  # 标题    url = db.Column(db.String(255), unique=True)  # 连接    info = db.Column(db.Text, )  # 介绍    logo = db.Column(db.String(255), unique=True)  # 封面    star = db.Column(db.SmallInteger)  # 星级    playnum = db.Column(db.BigInteger)  # 播放量    commentnum = db.Column(db.BigInteger)  # 评论量    tag_id = db.Column(db.Integer, db.ForeignKey('tag.id'))  # 所属标签    area = db.Column(db.String(255))  # 上映地区    release_time = db.Column(db.Date)  # 上映时间    length = db.Column(db.String(100))  # 播放时间    atttime = db.Column(db.DateTime, index=True, default=datetime.datetime.now())  # 添加时间    comments = db.relationship("Comment", backref="movie")  # 评论外键关联    moviecols = db.relationship("Moviecol", backref="movie")  # 电影收藏外键关联    def __repr__(self):        return "< Movie {title}>".format(title=self.title)# 上映预告class Preview(db.Model):    __tablename__ = "preview"    id = db.Column(db.Integer, primary_key=True)  # # 编号    title = db.Column(db.String(255), unique=True)  # 标题    logo = db.Column(db.String(255), unique=True)  # 封面    atttime = db.Column(db.DateTime, index=True, default=datetime.datetime.now())  # 添加时间    def __repr__(self):        return "< Preview {title}>".format(title=self.title)# 评论class Comment(db.Model):    __tablename__ = "comment"    id = db.Column(db.Integer, primary_key=True)  # 编号    title = db.Column(db.String(255), unique=True)  # 标题    movie_id = db.Column(db.Integer, db.ForeignKey('movie.id'))  # 所属电影    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))  # 所属用户    atttime = db.Column(db.DateTime, index=True, default=datetime.datetime.now())  # 添加时间    def __repr__(self):        return "< Comment {id}>".format(id=self.id)# 电影收藏class Moviecol(db.Model):    __tablename__ = "moviecol"    id = db.Column(db.Integer, primary_key=True)  # 编号    movie_id = db.Column(db.Integer, db.ForeignKey('movie.id'))  # 所属电影    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))  # 所属用户    atttime = db.Column(db.DateTime, index=True, default=datetime.datetime.now())  # 添加时间    def __repr__(self):        return "< Moviecol {id}>".format(id=self.id)# 权限class Auth(db.Model):    __tablename__ = "auth"    id = db.Column(db.Integer, primary_key=True)  # 编号    name = db.Column(db.String(100), unique=True)  # 名称    url = db.Column(db.String(255), unique=True)  # 地址    atttime = db.Column(db.DateTime, index=True, default=datetime.datetime.now())  # 添加时间    def __repr__(self):        return "< Auth {name}>".format(name=self.name)# 角色class Role(db.Model):    __tablename__ = "role"    id = db.Column(db.Integer, primary_key=True)  # 编号    name = db.Column(db.String(100), unique=True)  # 名称    auths = db.Column(db.String(600))  # 权限    atttime = db.Column(db.DateTime, index=True, default=datetime.datetime.now())  # 添加时间    def __repr__(self):        return "< Role {name}>".format(name=self.name)# 管理员class Admin(db.Model):    __tablename__ = "admin"    id = db.Column(db.Integer, primary_key=True)  # 编号    name = db.Column(db.String(100), unique=True)  # 帐号    role_id = db.Column(db.Integer, db.ForeignKey('role.id'))  # 所属用户    atttime = db.Column(db.DateTime, index=True, default=datetime.datetime.now())  # 添加时间    pwd = db.Column(db.String(100))  # 密码    is_supper = db.Column(db.SmallInteger)  # 超级管理员    adminlogs = db.relationship("Adminlog", backref='admin')    oplogs = db.relationship("Oplog", backref='admin')    def __repr__(self):        return "< Admin {name}>".format(name=self.name)# 管理员登陆日志class Adminlog(db.Model):    __tablename__ = "adminlog"    id = db.Column(db.Integer, primary_key=True)  # # 编号    admin_id = db.Column(db.Integer, db.ForeignKey("admin.id"))  # 所属会员    ip = db.Column(db.String(100))  # 登陆IP    addtime = db.Column(db.DateTime, index=True, default=datetime.datetime.now())  # 登陆时间    def __repr__(self):        return "< Adminlog {id}>".format(id=self.id)# 操作日志class Oplog(db.Model):    __tablename__ = "oplog"    id = db.Column(db.Integer, primary_key=True)  # # 编号    admin_id = db.Column(db.Integer, db.ForeignKey("admin.id"))  # 所属会员    ip = db.Column(db.String(100))  # 登陆IP    reason = db.Column(db.String(600))    addtime = db.Column(db.DateTime, index=True, default=datetime.datetime.now())  # 登陆时间    def __repr__(self):        return "< Oplog {id}>".format(id=self.id)if __name__ == "__main__":    # db.create_all( )    """    role = Role(        name=u"超级管理员",        auths=""    )    """    from werkzeug.security import generate_password_hash    admin = Admin(        name="kuangzhicheng",        pwd=generate_password_hash("a123456789."),        is_supper=0,        role_id=2    )    db.session.add(admin)    db.session.commit()